use bytes::{Buf, BufMut};
use commonware_codec::{Error, FixedSize, Read, Write};
use commonware_cryptography::{
    bls12381::primitives::poly::{PartialSignature, Signature},
    Digest,
};
use commonware_utils::{union, Array};

/// Used as the [`Index`](crate::Supervisor::Index) type.
/// Defines the current set of sequencers and validators.
///
/// This is not a single "View" in the sense of a consensus protocol, but rather a continuous
/// sequence of views in-which the set of sequencers and validators is constant.
pub type Epoch = u64;

/// Used as the [`Automaton::Context`](crate::Automaton::Context) type.
#[derive(Debug, Clone, Hash, PartialEq, Eq)]
pub struct Context<P: Array> {
    /// Sequencer's public key.
    pub sequencer: P,

    /// Sequencer-specific sequential height. Zero-indexed.
    pub height: u64,
}

const CHUNK_SUFFIX: &[u8] = b"_CHUNK";
const ACK_SUFFIX: &[u8] = b"_ACK";

/// Returns a suffixed namespace for signing a chunk.
pub fn chunk_namespace(namespace: &[u8]) -> Vec<u8> {
    union(namespace, CHUNK_SUFFIX)
}

/// Returns a suffixed namespace for signing an ack.
pub fn ack_namespace(namespace: &[u8]) -> Vec<u8> {
    union(namespace, ACK_SUFFIX)
}

/// Wire are messages that are sent over the network.
#[derive(Clone, Debug, PartialEq)]
pub enum Wire<P: Array, D: Digest> {
    Node(Node<P, D>),
    Ack(Ack<P, D>),
}

/// Chunk is a message generated by a sequencer that is broadcasted to all validators.
#[derive(Clone, Debug, PartialEq, Eq, Hash)]
pub struct Chunk<P: Array, D: Digest> {
    /// Sequencer's public key.
    pub sequencer: P,

    /// Sequencer-specific sequential height. Zero-indexed.
    pub height: u64,

    /// Digest of the payload.
    pub payload: D,
}

impl<P: Array, D: Digest> Chunk<P, D> {
    /// Create a new chunk with the given sequencer, height, and payload.
    pub fn new(sequencer: P, height: u64, payload: D) -> Self {
        Self {
            sequencer,
            height,
            payload,
        }
    }
}

impl<P: Array, D: Digest> Write for Chunk<P, D> {
    fn write(&self, writer: &mut impl BufMut) {
        self.sequencer.write(writer);
        self.height.write(writer);
        self.payload.write(writer);
    }
}

impl<P: Array, D: Digest> Read for Chunk<P, D> {
    fn read_cfg(reader: &mut impl Buf, _: &()) -> Result<Self, Error> {
        let sequencer = P::read(reader)?;
        let height = u64::read(reader)?;
        let payload = D::read(reader)?;
        Ok(Self {
            sequencer,
            height,
            payload,
        })
    }
}

impl<P: Array, D: Digest> FixedSize for Chunk<P, D> {
    const SIZE: usize = P::SIZE + u64::SIZE + D::SIZE;
}

/// Parent is a message that contains information about the parent (previous height) of a Chunk.
///
/// The sequencer and height are not provided as they are implied by the sequencer and height of the current chunk.
#[derive(Clone, Debug, PartialEq, Eq, Hash)]
pub struct Parent<D: Digest> {
    /// Digest of the parent chunk.
    pub digest: D,

    /// Epoch of the validator set.
    pub epoch: Epoch,

    /// Signature over the parent.
    pub signature: D,
}

/// Node is a message from a sequencer that contains a Chunk and a proof that the parent was correctly broadcasted.
///
/// It represents a newly-proposed tip of the chain for the given sequencer.
#[derive(Clone, Debug, PartialEq, Eq, Hash)]
pub struct Node<P: Array, D: Digest> {
    /// Chunk of the node.
    pub chunk: Chunk<P, D>,

    /// Signature of the sequencer the chunk.
    pub signature: D,

    /// Information about the parent chunk
    ///
    /// This part is not signed over, but it is used to verify that the previous chunk in the chain was correctly broadcast.
    pub parent: Option<Parent<D>>,
}

/// Ack is a message sent by a validator to acknowledge the receipt of a Chunk.
#[derive(Clone, Debug, PartialEq, Eq, Hash)]
pub struct Ack<P: Array, D: Digest> {
    /// Chunk that is being acknowledged.
    pub chunk: Chunk<P, D>,

    /// Epoch of the validator set.
    pub epoch: Epoch,

    /// Partial signature over the chunk.
    pub signature: PartialSignature,
}

/// Activity is the type associated with the [`Reporter`](crate::Reporter) trait.
#[derive(Clone, Debug, PartialEq)]
pub enum Activity<P: Array, D: Digest> {
    Chunk(Chunk<P, D>),
    Lock(Lock<P, D>),
}

/// Lock is a message that can be generated once `2f + 1` acks are received for a Chunk.
#[derive(Clone, Debug, PartialEq, Eq, Hash)]
pub struct Lock<P: Array, D: Digest> {
    /// Chunk that is being locked.
    pub chunk: Chunk<P, D>,

    /// Epoch of the validator set.
    pub epoch: Epoch,

    /// Partial signature over the chunk.
    pub signature: Signature,
}
