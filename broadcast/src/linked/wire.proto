syntax = "proto3";
package wire;

// Car is a message generated by a sequencer that is broadcasted to all participants.
// The hash of the car is referred to as the plate.
message Car {
    // Public key of the sequencer
    bytes sequencer = 1;

    // Sequencer-specific sequential index
    uint64 index = 2;

    // Payload data
    bytes payload = 3;

    // Hash of the previous car that has `index` of `this.index-1`
    bytes parent_plate = 4;

    // Threshold signature of the parent car
    bytes parent_threshold = 5;

    // Signature of the sequencer over the hash of the car
    bytes signature = 6;
}

// Ack is a message sent by a validator to acknowledge the receipt of a Car.
message Ack {
    // Plate (hash) of the car being acknowledged
    bytes plate = 1;

    // Public key of the validator
    bytes public_key = 2;

    // Signature of the validator over the hash of the car
    bytes signature = 3;
}
