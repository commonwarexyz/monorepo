syntax = "proto3";
package wire;

// Chunk is a message generated by a sequencer that is broadcasted to all participants.
message Chunk {
    // Public key of the sequencer
    // Sequencer-specific sequential index
    bytes sequencer = 1;
    uint64 height = 2;

    // Payload digest of the Chunk
    bytes payload_digest = 3;

    message Parent {
        // Digest of the previous Chunk that has `height` of `this.height-1`
        bytes chunk_digest = 1;

        // Threshold signature of the parent Chunk
        bytes threshold = 2;
    }
    optional Parent parent = 5;

    // Signature of the sequencer over the hash of the Chunk
    bytes signature = 6;
}

// Ack is a message sent by a signer to acknowledge the receipt of a Chunk.
message Ack {
    // Public key of the sequencer
    bytes sequencer = 1;
    uint64 height = 2;

    // Digest of the Chunk being acknowledged
    bytes chunk_digest = 3;

    // Epoch of the validator set
    uint64 epoch = 4;

    // Partial signature of the signer over the digest
    // The view and the signature's index are used to retrieve the signer's public key
    bytes partial = 5;
}
