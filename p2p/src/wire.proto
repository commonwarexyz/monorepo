syntax = "proto3";
package wire;

// Message is the only allowed message format that can be sent between peers.
message Message {
    oneof payload {
        Handshake handshake = 1;
        BitVec bit_vec = 2;
        Peers peers = 3;
        Chunk chunk = 4;
    }
}

// Allows recipient to verify that the sender has the private key
// of public key before sending any data.
//
// By requiring the server to have their public key signed, they prevent
// a malicious peer from forwarding a handshake message from a previous
// connection with public key (which could be used to convince the server
// to start a useless handshake). Alternatively, we could require the
// dialer to sign some random bytes provided by the server but this would
// require the server to send a message to a peer before authorizing that
// it should connect to them.
message Handshake {
    bytes recipient_public_key = 1;
    bytes ephemeral_public_key = 2;
    Signature signature = 3;
}

// BitVec is a bit vector that represents the peers a peer
// knows about at a given index.
//
// A peer should respond with a Peers message
// if they know of any peers that the sender does not.
message BitVec {
    uint64 index = 1;
    bytes bits = 2;
}

// Peer will send its signed IP to the recipient for gossip
// after the handshake has been established.
message Peer {
    bytes socket = 1;
    uint64 timestamp = 2;
    Signature signature = 3;
}

// Peers is gossiped to peers periodically to
// inform them of new peers that they can connect to.
//
// Peer will include their signed IP in this message.
message Peers {
    repeated Peer peers = 1;
}


// Chunk is one of potentially many parts of a message
// sent by a peer.
//
// If there is more than one part, the recipient will combine
// all parts into a single message.
message Chunk {
    uint32 channel = 1;
    uint32 part = 2;
    uint32 total_parts = 3;
    bytes content = 4;
} 

// Signature is an arbitrary public key and signature over
// either a Handshake or Peer message.
message Signature {
    bytes public_key = 1;
    bytes signature = 2;
}
