syntax = "proto3";
package wire;

// Message is the only allowed message format that can be sent between peers.
message Message {
    oneof payload {
        BitVec bit_vec = 1;
        Peers peers = 2;
        Data data = 3;
    }
}

// BitVec is a bit vector that represents the peers a peer
// knows about at a given index.
//
// A peer should respond with a Peers message
// if they know of any peers that the sender does not.
message BitVec {
    uint64 index = 1;
    bytes bits = 2;
}

// Peer will send its signed IP to the recipient for gossip
// after the handshake has been established.
message Peer {
    bytes socket = 1;
    uint64 timestamp = 2;
    Signature signature = 3;
}

// Peers is gossiped to peers periodically to
// inform them of new peers that they can connect to.
//
// Peer will include their signed IP in this message.
message Peers {
    repeated Peer peers = 1;
}

// Data is an arbitrary message sent between peers.
message Data {
    uint32 channel = 1;
    bytes message = 2;
}

// Signature is an arbitrary public key and signature over
// either a Handshake or Peer message.
message Signature {
    bytes public_key = 1;
    bytes signature = 2;
}
