name: Fast

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always
  UDEPS_VERSION: 0.1.57
  NIGHTLY_VERSION: nightly-2025-08-10

jobs:
  Lint:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            flags: "--features commonware-runtime/iouring-storage"
          - os: ubuntu-latest
            flags: "--features commonware-runtime/iouring-network"
          - os: ubuntu-latest
            flags: ""
          - os: windows-latest
            flags: ""
          - os: macos-latest
            flags: ""
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install nightly Rust toolchain
      run: rustup toolchain install ${{ env.NIGHTLY_VERSION }} && rustup component add --toolchain ${{ env.NIGHTLY_VERSION }} rustfmt
    - name: Run setup
      uses: ./.github/actions/setup
    - name: Lint
      run: cargo clippy --all-targets ${{ matrix.flags }} -- -D warnings
    - name: Fmt
      run: cargo +${{ env.NIGHTLY_VERSION }} fmt --all -- --check
    - name: Check docs
      run: cargo doc ${{ matrix.flags }} --no-deps --document-private-items
      env:
        RUSTDOCFLAGS: "-D warnings"

  Tests:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            flags: "--features commonware-runtime/iouring-storage"
          - os: ubuntu-latest
            flags: "--features commonware-runtime/iouring-network"
          - os: ubuntu-latest
            flags: ""
          - os: windows-latest
            flags: ""
          - os: macos-latest
            flags: ""
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Run setup
      uses: ./.github/actions/setup
    - name: Run tests
      run: cargo test ${{ matrix.flags }} --verbose

  Dependencies:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install nightly Rust toolchain
      run: rustup toolchain install ${{ env.NIGHTLY_VERSION }}
    - name: Get Rust version
      id: rust-version
      run: echo "rust_version=$(rustc +${{ env.NIGHTLY_VERSION }} --version)" >> "$GITHUB_OUTPUT"
    - name: Run setup
      uses: ./.github/actions/setup
    - name: Cache cargo-udeps
      id: cargo-udeps-cache
      uses: actions/cache@v4
      with:
        path: ~/.cargo/bin/cargo-udeps
        key: ${{ runner.os }}-${{ env.UDEPS_VERSION }}-cargo-udeps-${{ steps.rust-version.outputs.rust_version }}
    - name: Install cargo-udeps
      if: steps.cargo-udeps-cache.outputs.cache-hit != 'true'
      run: cargo +${{ env.NIGHTLY_VERSION }} install cargo-udeps --version ${{ env.UDEPS_VERSION }}
    - name: Check for unused dependencies
      run: cargo +${{ env.NIGHTLY_VERSION }} udeps --all-targets

  Lock:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Run setup
      uses: ./.github/actions/setup
    - name: Build entire workspace
      run: cargo build --workspace --all-targets
    - name: Check Cargo.lock unchanged
      run: |
        if ! git diff --exit-code Cargo.lock; then
          echo "ERROR: Cargo.lock was modified during build!"
          echo "This suggests that the Cargo.lock file in the repository is not up to date."
          echo "Please run 'cargo build' locally and commit the updated Cargo.lock."
          exit 1
        fi
        echo "âœ“ Cargo.lock remained unchanged after building everything"

  WASM:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Run setup
      uses: ./.github/actions/setup
    - name: Add WASM target
      run: rustup target add wasm32-unknown-unknown
    - name: Build cryptography
      run: cargo build --target wasm32-unknown-unknown --release --manifest-path cryptography/Cargo.toml && du -h target/wasm32-unknown-unknown/release/commonware_cryptography.wasm
    - name: Build macros
      run: cargo build --target wasm32-unknown-unknown --release --manifest-path macros/Cargo.toml # can't check size because it is a proc-macro
    - name: Build utils
      run: cargo build --target wasm32-unknown-unknown --release --manifest-path utils/Cargo.toml && du -h target/wasm32-unknown-unknown/release/commonware_utils.wasm
    - name: Build runtime
      run: cargo build --target wasm32-unknown-unknown --release --manifest-path runtime/Cargo.toml && du -h target/wasm32-unknown-unknown/release/commonware_runtime.wasm
    - name: Build consensus
      run: cargo build --target wasm32-unknown-unknown --release --manifest-path consensus/Cargo.toml && du -h target/wasm32-unknown-unknown/release/commonware_consensus.wasm
    - name: Build storage
      run: cargo build --target wasm32-unknown-unknown --release --manifest-path storage/Cargo.toml && du -h target/wasm32-unknown-unknown/release/commonware_storage.wasm

  no_std:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Run setup
      uses: ./.github/actions/setup
    - name: Add minimal no_std target
      run: rustup target add thumbv7em-none-eabihf
    - name: Install ARM bare-metal toolchain (required to compile C from x86 worker)
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-arm-none-eabi
    - name: Build and test codec
      run: cargo build -p commonware-codec --no-default-features --target thumbv7em-none-eabihf --release && du -h target/thumbv7em-none-eabihf/release/libcommonware_codec.rlib && cargo test -p commonware-codec --no-default-features --verbose
    - name: Build utils
      run: cargo build -p commonware-utils --no-default-features --target thumbv7em-none-eabihf --release && du -h target/thumbv7em-none-eabihf/release/libcommonware_utils.rlib
    - name: Build cryptography
      run: cargo build -p commonware-cryptography --no-default-features --target thumbv7em-none-eabihf --release && du -h target/thumbv7em-none-eabihf/release/libcommonware_cryptography.rlib

  Unsafe:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Run setup
      uses: ./.github/actions/setup
    - name: Install miri
      run: |
        rustup toolchain install ${{ env.NIGHTLY_VERSION }} --component miri
        rustup override set ${{ env.NIGHTLY_VERSION }}
        cargo miri setup
    - name: Run miri tests for storage::index
      run: |
        cd storage
        MIRIFLAGS="-Zmiri-disable-isolation" cargo miri test --lib index::

  Scripts:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Run shellcheck
      run: find scripts -name "*.sh" -exec shellcheck -o all {} +
