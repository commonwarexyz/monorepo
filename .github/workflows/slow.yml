name: Slow

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

concurrency:
  group: tests-slow-${{ github.head_ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

env:
  CARGO_TERM_COLOR: always
  FUZZ_VERSION: 0.12.0

jobs:
  Tests:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 180
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            flags: "--features commonware-runtime/iouring-storage"
          - os: ubuntu-latest
            flags: "--features commonware-runtime/iouring-network"
          - os: ubuntu-latest
            flags: ""
          - os: windows-latest
            flags: ""
          - os: macos-latest
            flags: ""
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Run setup
      uses: ./.github/actions/setup
    - name: Run ignored tests
      run: cargo test ${{ matrix.flags }} --verbose -- --ignored

  Benchmarks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - package: commonware-cryptography
            cargo_flags: ""
            file_suffix: ""
            benchmark_name: "commonware-cryptography"
          - package: commonware-storage
            cargo_flags: ""
            file_suffix: ""
            benchmark_name: "commonware-storage"
          - package: commonware-storage
            cargo_flags: "--features commonware-runtime/iouring-storage" # Additional features can be added here
            file_suffix: "-features"
            benchmark_name: "commonware-storage --features"
          - package: commonware-stream
            cargo_flags: ""
            file_suffix: ""
            benchmark_name: "commonware-stream"
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install nightly Rust toolchain
      run: rustup toolchain install nightly
    - name: Run setup
      uses: ./.github/actions/setup
    - name: Test benchmarks
      run: |
        cargo bench ${{ matrix.cargo_flags }} \
          --benches -p ${{ matrix.package }} \
          -- --test --verbose

  Fuzz:
    runs-on: ubuntu-latest
    timeout-minutes: 180
    strategy:
      matrix:
        fuzz_dir: [codec/fuzz, cryptography/fuzz, storage/fuzz, stream/fuzz]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install nightly Rust toolchain
      run: rustup toolchain install nightly
    - name: Get Rust version
      id: rust-version
      run: echo "rust_version=$(rustc +nightly --version)" >> "$GITHUB_OUTPUT"
    - name: Run setup
      uses: ./.github/actions/setup
    - name: Cache cargo-fuzz
      id: cargo-fuzz-cache
      uses: actions/cache@v4
      with:
        path: ~/.cargo/bin/cargo-fuzz
        key: ${{ runner.os }}-${{ env.FUZZ_VERSION }}-cargo-fuzz-${{ steps.rust-version.outputs.rust_version }}
    - name: Install cargo-fuzz
      if: steps.cargo-fuzz-cache.outputs.cache-hit != 'true'
      run: cargo +nightly install cargo-fuzz --version ${{ env.FUZZ_VERSION }}
    - name: Test all targets
      env:
        ASAN_OPTIONS: "detect_leaks=0"
      run: |
        for target in $(cargo +nightly fuzz list --fuzz-dir ${{ matrix.fuzz_dir }}); do
          cargo +nightly fuzz run $target --fuzz-dir ${{ matrix.fuzz_dir }} -- -max_total_time=60 -detect_leaks=0
        done
