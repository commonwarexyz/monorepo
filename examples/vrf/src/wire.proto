syntax = "proto3";
package wire;

// All messages that can be sent over DKG_CHANNEL.
message DKG {
    uint64 round = 1;
    oneof payload {
        Start start = 2;
        Share share = 3;
        Ack ack = 4;
        Commitment commitment = 5;
        Success success = 6;
        Abort abort = 7;
    }
}

// Send by arbiter to start DKG
message Start {
    optional bytes group = 1;
}

// Sent by dealer to player
message Share {
    bytes commitment = 1;
    bytes share = 2;
}

// Sent by player to dealer
message Ack {
    uint32 public_key = 1;
    bytes signature = 2; // over round + dealer + commitment
}

// Sent by dealer to arbiter after collecting acks from players
message Commitment {
    bytes commitment = 1;
    repeated Ack acks = 2;
    repeated bytes reveals = 3;
}

// Sent by arbiter to a player if round is successful
message Success {
    map<uint32, bytes> commitments = 1;
    map<uint32, bytes> reveals = 2;
}

// Sent by arbiter to all players if round is unsuccessful
message Abort {}

// All messages that can be sent over VRF_CHANNEL.
message VRF {
    uint64 round = 1;
    bytes signature = 2;
}